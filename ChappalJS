// Chappal.Js - A full-stack reactive framework

import { createServer, IncomingMessage, ServerResponse } from 'http';
import { parse as parseUrl } from 'url';
import { readFileSync } from 'fs';
import { join } from 'path';

// Reactive Core
class Dep {
  private subscribers: Set<() => void> = new Set();

  depend() {
    if (Dep.target) {
      this.subscribers.add(Dep.target);
    }
  }

  notify() {
    this.subscribers.forEach(sub => sub());
  }

  static target: (() => void) | null = null;
}

function reactive<T extends object>(obj: T): T {
  const deps = new Map<string | symbol, Dep>();

  return new Proxy(obj, {
    get(target, key) {
      if (!deps.has(key)) {
        deps.set(key, new Dep());
      }
      deps.get(key)!.depend();
      return Reflect.get(target, key);
    },
    set(target, key, value) {
      const result = Reflect.set(target, key, value);
      deps.get(key)?.notify();
      return result;
    }
  });
}

function effect(fn: () => void) {
  const run = () => {
    Dep.target = run;
    fn();
    Dep.target = null;
  };
  run();
}

function computed<T>(fn: () => T): { value: T } {
  const result = reactive({ value: undefined as T });
  effect(() => {
    result.value = fn();
  });
  return result;
}

// Virtual DOM
interface VNode {
  type: string | Function;
  props: Record<string, any>;
  children: (VNode | string)[];
}

function createElement(type: string | Function, props: Record<string, any> | null, ...children: (VNode | string)[]): VNode {
  return { type, props: props || {}, children };
}

function createTextElement(text: string): VNode {
  return {
    type: 'TEXT_ELEMENT',
    props: { nodeValue: text },
    children: []
  };
}

// Component System
abstract class Component {
  props: Record<string, any>;
  state: Record<string, any>;
  context: Record<string, any> = {};

  constructor(props: Record<string, any> = {}) {
    this.props = reactive(props);
    this.state = reactive({});
  }

  setState(newState: Partial<typeof this.state>) {
    Object.assign(this.state, newState);
    scheduleUpdate(this);
  }

  abstract render(): VNode;

  componentDidMount() {}
  componentDidUpdate() {}
  componentWillUnmount() {}
}

// Renderer
let nextUnitOfWork: Fiber | null = null;
let wipRoot: Fiber | null = null;
let currentRoot: Fiber | null = null;
let deletions: Fiber[] = [];

interface Fiber {
  type: string | Function;
  props: Record<string, any>;
  dom: Node | null;
  parent: Fiber | null;
  child: Fiber | null;
  sibling: Fiber | null;
  alternate: Fiber | null;
  effectTag?: 'PLACEMENT' | 'UPDATE' | 'DELETION';
  hooks?: any[];
}

function createDom(fiber: Fiber): Node {
  const dom =
    fiber.type === 'TEXT_ELEMENT'
      ? document.createTextNode('')
      : document.createElement(fiber.type as string);

  updateDom(dom, {}, fiber.props);

  return dom;
}

function updateDom(dom: Node, prevProps: Record<string, any>, nextProps: Record<string, any>) {
  // Remove old or changed event listeners
  Object.keys(prevProps)
    .filter(isEvent)
    .filter(key => !(key in nextProps) || isNew(prevProps, nextProps)(key))
    .forEach(name => {
      const eventType = name.toLowerCase().substring(2);
      dom.removeEventListener(eventType, prevProps[name]);
    });

  // Remove old properties
  Object.keys(prevProps)
    .filter(isProperty)
    .filter(isGone(prevProps, nextProps))
    .forEach(name => {
      (dom as any)[name] = '';
    });

  // Set new or changed properties
  Object.keys(nextProps)
    .filter(isProperty)
    .filter(isNew(prevProps, nextProps))
    .forEach(name => {
      (dom as any)[name] = nextProps[name];
    });

  // Add new event listeners
  Object.keys(nextProps)
    .filter(isEvent)
    .filter(isNew(prevProps, nextProps))
    .forEach(name => {
      const eventType = name.toLowerCase().substring(2);
      dom.addEventListener(eventType, nextProps[name]);
    });
}

function commitRoot() {
  deletions.forEach(commitWork);
  commitWork(wipRoot!.child);
  currentRoot = wipRoot;
  wipRoot = null;
}

function commitWork(fiber: Fiber | null) {
  if (!fiber) {
    return;
  }

  let domParentFiber = fiber.parent;
  while (domParentFiber && !domParentFiber.dom) {
    domParentFiber = domParentFiber.parent;
  }
  const domParent = domParentFiber!.dom;

  if (fiber.effectTag === 'PLACEMENT' && fiber.dom != null) {
    domParent.appendChild(fiber.dom);
  } else if (fiber.effectTag === 'UPDATE' && fiber.dom != null) {
    updateDom(fiber.dom, fiber.alternate!.props, fiber.props);
  } else if (fiber.effectTag === 'DELETION') {
    commitDeletion(fiber, domParent);
  }

  commitWork(fiber.child);
  commitWork(fiber.sibling);
}

function commitDeletion(fiber: Fiber, domParent: Node) {
  if (fiber.dom) {
    domParent.removeChild(fiber.dom);
  } else {
    commitDeletion(fiber.child!, domParent);
  }
}

function render(element: VNode, container: Node) {
  wipRoot = {
    type: 'root',
    dom: container,
    props: {
      children: [element],
    },
    alternate: currentRoot,
    parent: null,
    child: null,
    sibling: null,
  };
  deletions = [];
  nextUnitOfWork = wipRoot;
}

function workLoop(deadline: IdleDeadline) {
  let shouldYield = false;
  while (nextUnitOfWork && !shouldYield) {
    nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
    shouldYield = deadline.timeRemaining() < 1;
  }

  if (!nextUnitOfWork && wipRoot) {
    commitRoot();
  }

  requestIdleCallback(workLoop);
}

requestIdleCallback(workLoop);

function performUnitOfWork(fiber: Fiber): Fiber | null {
  const isFunctionComponent = fiber.type instanceof Function;
  if (isFunctionComponent) {
    updateFunctionComponent(fiber);
  } else {
    updateHostComponent(fiber);
  }

  if (fiber.child) {
    return fiber.child;
  }
  let nextFiber: Fiber | null = fiber;
  while (nextFiber) {
    if (nextFiber.sibling) {
      return nextFiber.sibling;
    }
    nextFiber = nextFiber.parent;
  }
  return null;
}

let wipFiber: Fiber | null = null;
let hookIndex: number | null = null;

function updateFunctionComponent(fiber: Fiber) {
  wipFiber = fiber;
  hookIndex = 0;
  wipFiber.hooks = [];
  const children = [(fiber.type as Function)(fiber.props)];
  reconcileChildren(fiber, children);
}

function useState<T>(initial: T): [T, (value: T) => void] {
  const oldHook =
    wipFiber!.alternate &&
    wipFiber!.alternate.hooks &&
    wipFiber!.alternate.hooks[hookIndex!];
  const hook = {
    state: oldHook ? oldHook.state : initial,
    queue: [] as ((value: T) => T)[],
  };

  const actions = oldHook ? oldHook.queue : [];
  actions.forEach(action => {
    hook.state = action(hook.state);
  });

  const setState = (action: (value: T) => T) => {
    hook.queue.push(action);
    wipRoot = {
      type: 'root',
      dom: currentRoot!.dom,
      props: currentRoot!.props,
      alternate: currentRoot,
      parent: null,
      child: null,
      sibling: null,
    };
    nextUnitOfWork = wipRoot;
    deletions = [];
  };

  wipFiber!.hooks!.push(hook);
  hookIndex!++;
  return [hook.state, setState];
}

function updateHostComponent(fiber: Fiber) {
  if (!fiber.dom) {
    fiber.dom = createDom(fiber);
  }
  reconcileChildren(fiber, fiber.props.children);
}

function reconcileChildren(wipFiber: Fiber, elements: (VNode | string)[]) {
  let index = 0;
  let oldFiber = wipFiber.alternate && wipFiber.alternate.child;
  let prevSibling: Fiber | null = null;

  while (index < elements.length || oldFiber != null) {
    const element = elements[index];
    let newFiber: Fiber | null = null;

    const sameType =
      oldFiber &&
      element &&
      element.type === oldFiber.type;

    if (sameType) {
      newFiber = {
        type: oldFiber!.type,
        props: (element as VNode).props,
        dom: oldFiber!.dom,
        parent: wipFiber,
        alternate: oldFiber,
        effectTag: 'UPDATE',
        child: null,
        sibling: null,
      };
    }
    if (element && !sameType) {
      newFiber = {
        type: (element as VNode).type,
        props: (element as VNode).props,
        dom: null,
        parent: wipFiber,
        alternate: null,
        effectTag: 'PLACEMENT',
        child: null,
        sibling: null,
      };
    }
    if (oldFiber && !sameType) {
      oldFiber.effectTag = 'DELETION';
      deletions.push(oldFiber);
    }

    if (oldFiber) {
      oldFiber = oldFiber.sibling;
    }

    if (index === 0) {
      wipFiber.child = newFiber;
    } else if (element) {
      prevSibling!.sibling = newFiber;
    }

    prevSibling = newFiber;
    index++;
  }
}

// Router
class Router {
  private routes: Map<string, Component> = new Map();

  addRoute(path: string, component: typeof Component) {
    this.routes.set(path, new component());
  }

  navigate(path: string) {
    const component = this.routes.get(path);
    if (component) {
      render(component.render(), document.body);
    } else {
      console.error(`Route not found: ${path}`);
    }
  }
}

// Server-side rendering
function renderToString(element: VNode): string {
  if (typeof element.type === 'string') {
    let props = '';
    for (const [key, value] of Object.entries(element.props)) {
      if (key !== 'children') {
        props += ` ${key}="${value}"`;
      }
    }
    const children = element.children.map(child => 
      typeof child === 'string' ? child : renderToString(child)
    ).join('');
    return `<${element.type}${props}>${children}</${element.type}>`;
  } else if (typeof element.type === 'function') {
    const component = new (element.type as any)(element.props);
    return renderToString(component.render());
  }
  return '';
}

// API Routes
type RouteHandler = (req: IncomingMessage, res: ServerResponse) => void;

class APIRouter {
  private routes: Map<string, RouteHandler> = new Map();

  addRoute(path: string, handler: RouteHandler) {
    this.routes.set(path, handler);
  }

  handleRequest(req: IncomingMessage, res: ServerResponse) {
    const url = parseUrl(req.url || '');
    const handler = this.routes.get(url.pathname || '/');
    if (handler) {
      handler(req, res);
    } else {
      res.writeHead(404);
      res.end('Not Found');
    }
  }
}

// Server
class ChappalServer {
  private apiRouter: APIRouter = new APIRouter();
  private staticDir: string = 'public';

  constructor(private port: number) {}

  addAPIRoute(path: string, handler: RouteHandler) {
    this.apiRouter.addRoute(path, handler);
  }

  setStaticDir(dir: string) {
    this.staticDir = dir;
  }

  start() {
    const server = createServer((req, res) => {
      const url = parseUrl(req.url || '');
      if (url.pathname?.startsWith('/api')) {
        this.apiRouter.handleRequest(req, res);
      } else {
        this.serveStatic(req, res);
      }
    });

    server.listen(this.port, () => {
      console.log(`Chappal.Js server running on http://localhost:${this.port}`);
    });
  }

  private serveStatic(req: IncomingMessage, res: ServerResponse) {
    const url = parseUrl(req.url || '');
    const filePath = join(this.staticDir, url.pathname || '');
    try {
      const content = readFileSync(filePath);
      res.writeHead(200);
      res.end(content);
    } catch (error) {
      res.writeHead(404);
      res.end('Not Found');
    }
  }
}

// Chappal.Js main export
export default {
  Component,
  createElement,
  render,
  useState,
  reactive,
  computed,
  effect,
  Router,
  renderToString,
  ChappalServer,
};

// Helper functions
const isEvent = (key: string) => key.startsWith("on");
const isProperty = (key: string) => key !== "children" && !isEvent(key);
const isNew = (prev: Record<string, any>, next: Record<string, any>) => (key: string) => prev[key] !== next[key];
const isGone = (prev: Record<string, any>, next: Record<string, any>) => (key: string) => !(key in next);

function scheduleUpdate(component: Component) {
  wipRoot =
  {
    type: 'root',
    dom: currentRoot!.dom,
    props: currentRoot!.props,
    alternate: currentRoot,
    parent: null,
    child: null,
    sibling: null,
  };
  nextUnitOfWork = wipRoot;
  deletions = [];
}
